package com.ylab.app.dbService.dao.impl;

import com.ylab.app.dbService.dao.AuditDao;
import com.ylab.app.exception.dbException.DatabaseReadException;
import com.ylab.app.exception.dbException.DatabaseWriteException;
import com.ylab.app.model.Audit;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.util.List;
import java.util.Objects;

import static com.ylab.app.constants.CreateSchemaSql.INSERT_SCHEMA_AUDITION;
import static com.ylab.app.constants.SqlQueryClass.GET_AUDIT;

/**
 * AuditDaoImpl class represents an implementation of AuditDao interface for managing audit messages.
 * <p>
 * This class utilizes JdbcTemplate to send and retrieve audit messages from the database.
 *
 * @author razlivinsky
 * @since 17.02.2024
 */
@Repository
public class AuditDaoImpl implements AuditDao {
    private final JdbcTemplate jdbcTemplate;

    /**
     * Instantiates a new Audit dao.
     *
     * @param jdbcTemplate the jdbc template
     */
    public AuditDaoImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    private final RowMapper<Audit> auditRowMapper = (rs, rowNum) -> {
        Audit audit = new Audit(rs.getString("message"));
        audit.setId(rs.getLong("id"));
        return audit;
    };

    /**
     * Sends an audit message to the database and sets the message ID generated by the database.
     *
     * @param audit the audit message to be sent
     * @throws DatabaseWriteException if the message sending fails
     */
    @Override
    public void sendMessage(Audit audit) {
        try {
            KeyHolder keyHolder = new GeneratedKeyHolder();
            jdbcTemplate.update(connection -> {
                PreparedStatement ps = connection.prepareStatement(INSERT_SCHEMA_AUDITION, new String[] {"id"});
                ps.setString(1, audit.getMessage());
                return ps;
            }, keyHolder);
            audit.setId(Objects.requireNonNull(keyHolder.getKey()).longValue());
        } catch (DataAccessException e) {
            throw new DatabaseWriteException("Failed to send message " + e.getMessage());
        }
    }

    /**
     * Retrieves all audit messages from the database.
     *
     * @return a list of all audit messages
     * @throws DatabaseReadException if the retrieval of audit messages fails
     */
    @Override
    public List<Audit> getMessage() {
            try {
                return jdbcTemplate.query(GET_AUDIT, auditRowMapper);
            } catch (DataAccessException e) {
                throw new DatabaseReadException("Failed to retrieve all audit message " + e.getMessage());
        }
    }
}